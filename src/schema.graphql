type Query {
  hello(name: String): String!
  quantity: Int!
  user(id: ID): [User!]!
  author(id: ID): [Author!]!
  book(id: ID): [Book!]!
}

type User {
  id: ID!
  name: String!
  lastName: String!
  email: String!
}

type Author {
  id: ID!
  name: String!
  country: String!
  register_by: User!
  books: [Book!]!
}

type Book {
  id: ID!
  title: String
  description: String!
  quantity: Int!
  price: Int!
  writted_by: Author!
  register_by: User!
}

type Mutation {
  createUser(data: createUserInput): User!
  updateUser(id: ID!, data: updateUserInput): User!
  createAuthor(name: String!, country: String!, register_by: ID!): Author!
  createBook(data: createBookInput): Book!
}

type Subscription {
    count: Int!
    author: AuthorSubscriptionPayload!
    book(authorId: ID!): BookSubscriptionPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type BookSubscriptionPayload {
    mutation: MutationType!
    data: Book!
}

type AuthorSubscriptionPayload {
    mutation: String!
    data: Author!
}

input createUserInput {
  name: String!
  lastName: String!
  email: String!
  password: String!
}

input updateUserInput {
  lastName: String
  email: String
  password: String
}

input createBookInput {
  title: String
  description: String!
  quantity: Int!
  price: Int!
  writted_by: ID!
  register_by: ID   !
}
